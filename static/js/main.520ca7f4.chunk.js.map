{"version":3,"sources":["components/FlagCard/index.js","components/Nav/index.js","components/gameContainer.js","App.js","serviceWorker.js","index.js"],"names":["FlagCard","props","react_default","a","createElement","className","src","image","alt","country","id","onClick","handleClick","Nav","href","width","height","score","style","backgroundColor","GameContainer","state","flags","clickedFlags","unselectedCountries","map","flag","shuffle","i","length","j","Math","floor","random","_ref","event","_this","indexOf","target","handleLoss","index","setState","concat","unselectedCoutries","splice","handleWin","alert","join","resetGame","_this2","this","components_Nav","components_FlagCard","key","Component","App","gameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.520ca7f4.chunk.js","sourcesContent":["import React from 'react'\nimport './flagCard.css'\n\nconst FlagCard = props => {\n    return (\n    <div className=\"card\">\n        <img \n        className=\"card-img-top\" \n        src={props.image} \n        alt={props.country} \n        id={props.id}\n        onClick={props.handleClick}\n        />\n    </div>\n    )\n}\n\nexport default FlagCard;","import React from 'react'\nimport './nav.css'\n\nconst Nav = props => {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#home\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Flag_of_Tennessee.svg/255px-Flag_of_Tennessee.svg.png\" width=\"40\" height=\"30\" className=\"d-inline-block align-top mr-2 mt-2\" alt=\"\" />\n                Fun With Flags\n            </a>\n            <span className=\"navbar-text\">\n                Score: {props.score}\n            </span>\n        </nav>\n    )\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport flags from '../flags.json'\nimport FlagCard from './FlagCard'\nimport Nav from './Nav'\n\nconst style = {\n    backgroundColor: '#aac7f7'\n}\n\nclass GameContainer extends Component {\n\n    state = {\n        score: 0,\n        flags: flags,\n        clickedFlags: [],\n        unselectedCountries: flags.map(flag=> {\n            return flag.country\n        })\n    };\n\n    shuffle = (a) => {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    };\n\n    handleClick = event => {\n        if(this.state.score === 12){\n            return false;\n        }\n\n        const checkIfClicked = this.state.clickedFlags.indexOf(event.target.id) > -1;\n\n        if(checkIfClicked) {\n            this.handleLoss(event.target.alt);\n        } else {\n            let index = this.state.unselectedCountries.indexOf(event.target.alt)\n            this.setState({\n                score: this.state.score +1,\n                clickedFlags: this.state.clickedFlags.concat(event.target.id),\n                unselectedCoutries: this.state.unselectedCountries.splice(index,1)\n            })\n            if (this.state.score === 12) {\n                this.handleWin();\n            }\n        }\n    };\n\n    handleLoss = country => {\n        alert('You lose.\\nYou already guessed ' + country + '\\nYou missed ' + this.state.unselectedCountries.join(', '))\n        this.resetGame()\n    }\n\n    handleWin = () => {\n        alert('You Win! You got all the flags!')\n        this.resetGame()\n    }\n\n    resetGame = () => {\n        this.setState({\n            score: 0,\n            flags: flags,\n            clickedFlags: [],\n            unselectedCountries: flags.map(flag=> {\n                return flag.country\n            })\n        })\n    }\n\n    render(){\n        return (\n            <div style={style}>\n                <Nav score={this.state.score} />\n                <div className='container'> \n                    {this.shuffle(this.state.flags).map(flag => {\n                    return <FlagCard id={flag.id} key={flag.id} image={flag.image} country={flag.country} handleClick={this.handleClick} />\n                })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameContainer;\n","import React, { Component } from 'react';\nimport GameContainer from './components/gameContainer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <GameContainer />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}